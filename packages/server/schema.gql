# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateGameInput {
  name: String!
  votingSystem: ID!
}

type Credentials {
  accessToken: String!
  player: Player!
}

union CredentialsOrMistake = Credentials | Mistake

type Game implements Node {
  createdBy: Player!
  currentVotation: Votation!
  id: ID!
  name: String!
  players: [Player!]!
  votingSystem: VotingSystem!
}

union GameOrMistake = Game | Mistake

type Mistake {
  message: String!
  status: String!
}

type Mutation {
  createGame(createGameInput: CreateGameInput!): GameOrMistake!
  createVote(voteInput: VoteInput!): Vote!
  newVotation(id: ID!): GameOrMistake!
  revealVotation(votationId: ID!): Votation!
  signIn: CredentialsOrMistake!
  signUp(name: String! = ""): CredentialsOrMistake!
  startVotation(votationId: ID!): Votation!
  updateGameName(updateGameNameInput: UpdateGameNameInput!): GameOrMistake!
  updateName(name: String!): Player!
}

interface Node {
  id: ID!
}

type Player implements Node {
  id: ID!
  name: String!
}

type Query {
  game(id: ID!): GameOrMistake!
  node(id: ID!): Node
  player(id: String!): Player!
  playerVote(playerId: ID!, votationId: ID!): Vote!
  viewer(gameId: ID): Viewer!
  vote(id: ID!): Vote!
  votingSystem(id: String!): VotingSystem!
  votingSystems(search: String): [VotingSystem!]!
}

type Subscription {
  onNewVote(voteId: ID!): Vote!
  onUpdatedGame(id: ID!): Game!
  onUpdatedVotation(votationId: ID!): Votation!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateGameNameInput {
  id: ID!
  name: String!
}

type Viewer {
  id: ID!
  player: Player!
  vote: Vote
}

type Votation implements Node {
  card: Float!
  id: ID!
  revealed: Boolean!
  started: Boolean!
  votes: [Vote!]!
}

type Vote implements Node {
  card: String
  id: ID!
  player: Player!
  revealed: Boolean!
  votedAt: Timestamp!
}

input VoteInput {
  card: Int
  votationId: ID!
}

type VotingSystem implements Node {
  cards: [String!]!
  id: ID!
  name: ID!
}